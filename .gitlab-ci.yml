default:
  image: webdevops/php:8.0

cache:
  key: "$CI_COMMIT_REF_SLUG"
  paths:
    - vendor/

variables:
  COMPOSER_ALLOW_SUPERUSER: "1"
  COMPOSER_NO_INTERACTION: "1"
  GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_JOB_ID/$CI_PROJECT_PATH

stages:
  - build
  - lint
  - sca
  - test
  - docs
  - deploy

build:
  stage: build
  script:
    - composer install --no-progress
  rules:
    - if: '$RENDER_DOCS'
      when: never
    - if: '$CI_COMMIT_BRANCH'
      when: on_success

lint:php:
  stage: lint
  needs:
    - build
  script:
    - composer lint -- --dry-run
  rules:
    - if: '$RENDER_DOCS'
      when: never
    - if: '$CI_COMMIT_BRANCH'
      when: on_success

lint:composer:
  stage: lint
  needs:
    - build
  script:
    - composer normalize --dry-run
  rules:
    - if: '$RENDER_DOCS'
      when: never
    - if: '$CI_COMMIT_BRANCH'
      when: on_success

sca:php:
  stage: sca
  needs:
    - build
  before_script:
    - mkdir -p .build
  script:
    - composer sca -- --error-format gitlab > .build/phpstan.json
  artifacts:
    reports:
      codequality: .build/phpstan.json
  rules:
    - if: '$RENDER_DOCS'
      when: never
    - if: '$CI_COMMIT_BRANCH'
      when: on_success

test:unit:
  image: webdevops/php:${PHP_VERSION}
  stage: test
  variables:
    PHP_MEMORY_LIMIT: "-1"
    PHP_MAX_EXECUTION_TIME: "600"
  before_script:
    - >
      if [ "$COVERAGE" == "1" ]; then
        pecl channel-update pecl.php.net
        pecl install pcov
        docker-php-ext-enable pcov
      fi
  script:
    - composer self-update --${COMPOSER_VERSION}
    - composer --version
    - php --version
    - composer require --dev "composer/composer:^${COMPOSER_VERSION}.0" --no-progress
    - >
      if [ "$COVERAGE" == "1" ]; then
        COMPOSER_PROCESS_TIMEOUT=1000 composer test:ci -- --testdox
      else
        composer test -- --testdox
      fi
  parallel:
    matrix:
      - PHP_VERSION: ["7.1", "7.2", "7.3", "7.4"]
        COMPOSER_VERSION: ["1", "2"]
      - PHP_VERSION: "8.0"
        COMPOSER_VERSION: "1"
      - PHP_VERSION: "8.0"
        COMPOSER_VERSION: "2"
        COVERAGE: "1"
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure
  coverage: '/^\s*Lines:\s*\d+.\d+\%/'
  # Disable cache to force re-install of Composer
  # dependencies for each single PHP version
  cache:
    key: "${CI_COMMIT_REF_SLUG}-${PHP_VERSION}-${COMPOSER_VERSION}"
    paths:
      - vendor/
  artifacts:
    reports:
      junit: .build/coverage/junit.xml
  rules:
    - if: '$RENDER_DOCS'
      when: never
    - if: '$CI_COMMIT_BRANCH'
      when: on_success

test:reporter:
  stage: test
  variables:
    UPDATE_CHECK_URL: $CI_REPOSITORY_URL
    UPDATE_CHECK_REF: $CI_BUILD_REF
  # Only inherit relevant variables to avoid conflicts with GIT_CLONE_PATH
  # in downstream pipeline, see https://gitlab.com/gitlab-org/gitlab/-/issues/220047
  inherit:
    variables:
      - UPDATE_CHECK_URL
      - UPDATE_CHECK_REF
  trigger:
    project: eliashaeussler/composer-update-reporter
    strategy: depend
    branch: master
  rules:
    - if: '$RENDER_DOCS'
      when: never
    - if: '$CI_COMMIT_BRANCH'
      when: on_success

test:docker:
  stage: test
  image: docker:19.03.12
  services:
    - docker:19.03.12-dind
  before_script:
    - apk add --no-cache bash git
  script:
    - ./bin/run-docker-tests.sh --composer-version "${COMPOSER_VERSION}"
  parallel:
    matrix:
      - COMPOSER_VERSION: ["1", "2"]
  rules:
    - if: '$RENDER_DOCS'
      when: never
    - if: '$CI_COMMIT_BRANCH'
      when: on_success

docs:
  stage: docs
  image: docker:19.03.12
  services:
    - docker:19.03.12-dind
  before_script:
    - apk add --no-cache docker-compose
  script:
    - docker-compose -f docs/build/docker-compose.yaml build --pull
    - docker-compose -f docs/build/docker-compose.yaml run --rm docs build
  artifacts:
    paths:
      - site/
  rules:
    - if: '$RENDER_DOCS'
      when: on_success
    - if: '$CI_COMMIT_BRANCH == "master"'
      when: on_success

deploy:docs:
  stage: deploy
  image: instrumentisto/rsync-ssh
  dependencies:
    - docs
  before_script:
    - which ssh-agent || (apt-get update -y && apt-get install openssh-client -y)
    - eval $(ssh-agent -s)
    - echo "$PRIVATE_KEY_FOR_DEPLOYMENT" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan cp140.sp-server.net >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - 'rsync -avz --chmod=Du=rwx,Dgo=rx,Fu=rw,Fog=r site/ eliashae@cp140.sp-server.net:/home/eliashae/html/docs.elias-haeussler.de/composer-update-check/'
  rules:
    - if: '$RENDER_DOCS'
      when: never
    - if: '$CI_COMMIT_BRANCH == "master"'
      when: on_success

# Deploy docker image
.deploy:docker: &deploy-docker-template
  stage: deploy
  image: docker:19.03.12
  services:
    - docker:19.03.12-dind
  before_script:
    - docker login -u "$EXTERNAL_REGISTRY_USER" -p "$EXTERNAL_REGISTRY_PASSWORD" $EXTERNAL_REGISTRY
  rules:
    - if: '$RENDER_DOCS'
      when: never
    - if: '$CI_COMMIT_TAG'
      when: on_success

deploy:docker:v2:
  <<: *deploy-docker-template
  script:
    - >
      docker build --pull \
        --build-arg COMPOSER_VERSION=2 \
        --tag $EXTERNAL_REGISTRY_IMAGE:$CI_COMMIT_TAG-v2 \
        --tag $EXTERNAL_REGISTRY_IMAGE:$CI_COMMIT_TAG \
        --tag $EXTERNAL_REGISTRY_IMAGE:v2 \
        --tag $EXTERNAL_REGISTRY_IMAGE:latest \
        .
    - docker push $EXTERNAL_REGISTRY_IMAGE:$CI_COMMIT_TAG-v2
    - docker push $EXTERNAL_REGISTRY_IMAGE:$CI_COMMIT_TAG
    - docker push $EXTERNAL_REGISTRY_IMAGE:v2
    - docker push $EXTERNAL_REGISTRY_IMAGE:latest

deploy:docker:v1:
  <<: *deploy-docker-template
  script:
    - >
      docker build --pull \
        --build-arg COMPOSER_VERSION=1 \
        --tag $EXTERNAL_REGISTRY_IMAGE:$CI_COMMIT_TAG-v1 \
        --tag $EXTERNAL_REGISTRY_IMAGE:v1 \
        .
    - docker push $EXTERNAL_REGISTRY_IMAGE:$CI_COMMIT_TAG-v1
    - docker push $EXTERNAL_REGISTRY_IMAGE:v1
