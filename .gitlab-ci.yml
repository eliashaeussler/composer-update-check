variables:
  COMPOSER_CACHE_DIR: "/cache/composer"
  COMPOSER_ALLOW_SUPERUSER: "1"
  COMPOSER_NO_INTERACTION: "1"

stages:
  - test-v1
  - test-v2
  - docs
  - deploy
  - test-docker

.test: &test-template
  image: webdevops/php:${PHP_VERSION}
  script:
    - pecl channel-update pecl.php.net
    - pecl install pcov
    - docker-php-ext-enable pcov
    - composer self-update --${COMPOSER_VERSION}
    - composer --version
    - php --version
    - composer req --dev "composer/composer:^${COMPOSER_VERSION}.0" --no-progress
    - >
      if [[ $TEST_COMPATIBILITY ]]; then
        composer require --dev pcov/clobber
        vendor/bin/pcov clobber
      fi
    - composer install --no-progress
    - COMPOSER_PROCESS_TIMEOUT=1000 composer test:ci -- --testdox
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure
  coverage: '/^\s*Lines:\s*\d+.\d+\%/'
  artifacts:
    reports:
      junit: .build/coverage/junit.xml
  rules:
    - if: '$BUILD_DOCKER_TEST_IMAGE'
      when: never
    - if: '$RENDER_DOCS'
      when: never
    - if: '$CI_COMMIT_BRANCH'
      when: on_success

test-v1:
  <<: *test-template
  stage: test-v1
  variables:
    COMPOSER_VERSION: "1"
  parallel:
    matrix:
      - PHP_VERSION: "7.1"
        TEST_COMPATIBILITY: "1"
      - PHP_VERSION: "7.2"
      - PHP_VERSION: "7.3"
      - PHP_VERSION: "7.4"

test-v2:
  <<: *test-template
  stage: test-v2
  variables:
    COMPOSER_VERSION: "2"
  parallel:
    matrix:
      - PHP_VERSION: "7.1"
        TEST_COMPATIBILITY: "1"
      - PHP_VERSION: "7.2"
      - PHP_VERSION: "7.3"
      - PHP_VERSION: "7.4"

docs:
  stage: docs
  image: docker:19.03.12
  services:
    - docker:19.03.12-dind
  before_script:
    - apk add --no-cache docker-compose
  script:
    - docker-compose -f docs/build/docker-compose.yaml run docs build
  artifacts:
    paths:
      - site/
  rules:
    - if: '$BUILD_DOCKER_TEST_IMAGE'
      when: never
    - if: '$RENDER_DOCS'
      when: on_success
    - if: '$CI_COMMIT_BRANCH == "master"'
      when: on_success

deploy:docs:
  stage: deploy
  image: instrumentisto/rsync-ssh
  dependencies:
    - docs
  before_script:
    - which ssh-agent || (apt-get update -y && apt-get install openssh-client -y)
    - eval $(ssh-agent -s)
    - echo "$PRIVATE_KEY_FOR_DEPLOYMENT" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan cp140.sp-server.net >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - 'rsync -avz --chmod=Du=rwx,Dgo=rx,Fu=rw,Fog=r site/ eliashae@cp140.sp-server.net:/home/eliashae/html/docs.elias-haeussler.de/composer-update-check/'
  rules:
    - if: '$BUILD_DOCKER_TEST_IMAGE'
      when: never
    - if: '$RENDER_DOCS'
      when: never
    - if: '$CI_COMMIT_BRANCH == "master"'
      when: on_success

# Deploy docker image
.deploy:docker: &deploy-docker-template
  stage: deploy
  image: docker:19.03.12
  services:
    - docker:19.03.12-dind
  before_script:
    - docker login -u "$EXTERNAL_REGISTRY_USER" -p "$EXTERNAL_REGISTRY_PASSWORD" $EXTERNAL_REGISTRY
  rules:
    - if: '$BUILD_DOCKER_TEST_IMAGE'
      when: never
    - if: '$RENDER_DOCS'
      when: never
    - if: '$CI_COMMIT_TAG'
      when: on_success

deploy:docker:v2:
  <<: *deploy-docker-template
  script:
    - >
      docker build --pull \
        --build-arg COMPOSER_VERSION=2 \
        --tag $EXTERNAL_REGISTRY_IMAGE:$CI_COMMIT_TAG-v2 \
        --tag $EXTERNAL_REGISTRY_IMAGE:$CI_COMMIT_TAG \
        --tag $EXTERNAL_REGISTRY_IMAGE:v2 \
        --tag $EXTERNAL_REGISTRY_IMAGE:latest \
        .
    - docker push $EXTERNAL_REGISTRY_IMAGE:$CI_COMMIT_TAG-v2
    - docker push $EXTERNAL_REGISTRY_IMAGE:$CI_COMMIT_TAG
    - docker push $EXTERNAL_REGISTRY_IMAGE:v2
    - docker push $EXTERNAL_REGISTRY_IMAGE:latest

deploy:docker:v1:
  <<: *deploy-docker-template
  script:
    - >
      docker build --pull \
        --build-arg COMPOSER_VERSION=1 \
        --tag $EXTERNAL_REGISTRY_IMAGE:$CI_COMMIT_TAG-v1 \
        --tag $EXTERNAL_REGISTRY_IMAGE:v1 \
        .
    - docker push $EXTERNAL_REGISTRY_IMAGE:$CI_COMMIT_TAG-v1
    - docker push $EXTERNAL_REGISTRY_IMAGE:v1

deploy:docker:test:
  stage: deploy
  image: docker:19.03.12
  services:
    - docker:19.03.12-dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build --build-arg COMPOSER_VERSION=1 --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG-v1 .
    - docker build --build-arg COMPOSER_VERSION=2 --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG-v2 .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG-v1
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG-v2
  rules:
    - if: '$RENDER_DOCS'
      when: never
    - if: '$CI_COMMIT_BRANCH'
      when: on_success
    - if: '$BUILD_DOCKER_TEST_IMAGE'
      when: on_success

test-docker:
  stage: test-docker
  image: docker:19.03.12
  services:
    - docker:19.03.12-dind
  before_script:
    - apk add --no-cache bash git
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - ./bin/run-docker-tests.sh "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG-v1"
    - ./bin/run-docker-tests.sh "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG-v2"
  rules:
    - if: '$RENDER_DOCS'
      when: never
    - if: '$CI_COMMIT_BRANCH'
      when: on_success
    - if: '$BUILD_DOCKER_TEST_IMAGE'
      when: on_success
